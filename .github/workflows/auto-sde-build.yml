name: Auto SDE Build and Release

on:
  workflow_dispatch:
  schedule:
    # 北京时间每天下午7点10分执行 (UTC时间11:10)
    - cron: '10 11 * * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  get-build-info:
    name: 获取SDE版本信息
    runs-on: ubuntu-latest
    
    outputs:
      build-number: ${{ steps.get-build-info.outputs.build-number }}
      release-date: ${{ steps.get-build-info.outputs.release-date }}
      build-key: ${{ steps.get-build-info.outputs.build-key }}
      new-build: ${{ steps.get-build-info.outputs.new-build }}
    
    steps:
    - name: 获取SDE版本信息并检查重复
      id: get-build-info
      run: |
        echo "[+] 获取最新SDE版本信息..."
        
        # 获取最新SDE信息
        SDE_INFO=$(curl -s "https://developers.eveonline.com/static-data/tranquility/latest.jsonl" | jq -r '.')
        
        BUILD_NUMBER=$(echo "$SDE_INFO" | jq -r '.buildNumber')
        RELEASE_DATE=$(echo "$SDE_INFO" | jq -r '.releaseDate')
        BUILD_KEY=$(echo "$SDE_INFO" | jq -r '._key')
        
        echo "Build number: ${BUILD_NUMBER}"
        echo "Release date: ${RELEASE_DATE}"
        echo "Build key: ${BUILD_KEY}"
        
        # 检查Release是否已存在
        TAG_NAME="sde-build-${BUILD_NUMBER}"
        echo "[+] 检查Release是否已存在: ${TAG_NAME}"
        
        RELEASE_EXISTS=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG_NAME}" | jq -r '.id')
        
        if [ "$RELEASE_EXISTS" != "null" ] && [ -n "$RELEASE_EXISTS" ]; then
          echo "Release ${TAG_NAME} 已存在，跳过构建"
          NEW_BUILD="false"
        else
          echo "新版本 ${TAG_NAME} 需要构建"
          NEW_BUILD="true"
        fi
        
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "release-date=${RELEASE_DATE}" >> $GITHUB_OUTPUT
        echo "build-key=${BUILD_KEY}" >> $GITHUB_OUTPUT
        echo "new-build=${NEW_BUILD}" >> $GITHUB_OUTPUT

  build-sde:
    name: 构建SDE数据库
    runs-on: ubuntu-latest
    
    needs: [get-build-info]
    if: needs.get-build-info.outputs.new-build == 'true'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 执行SDE构建
      run: |
        echo "[+] 执行SDE构建"
        python main.py
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: sde-output-${{ needs.get-build-info.outputs.build-number }}
        path: |
          output_sde/
          output_icons/
          release_compare_${{ needs.get-build-info.outputs.build-number }}.log
        retention-days: 30

  create-release:
    name: 创建Release
    runs-on: ubuntu-latest
    
    needs: [get-build-info, build-sde]
    if: needs.get-build-info.outputs.new-build == 'true'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: sde-output-${{ needs.get-build-info.outputs.build-number }}
        path: ./
    
    - name: 创建压缩包
      run: |
        BUILD_NUMBER="${{ needs.get-build-info.outputs.build-number }}"
        
        # 创建图标压缩包（从output_icons/icons.zip复制）
        if [ -f "output_icons/icons.zip" ]; then
          cp "output_icons/icons.zip" "icons.zip"
          echo "[+] 图标压缩包创建完成: icons.zip"
        else
          echo "[x] 图标压缩包不存在: output_icons/icons.zip"
          exit 1
        fi
        
        # 创建SDE数据压缩包（直接压缩output_sde目录为ZIP格式）
        cd output_sde
        zip -r "../sde.zip" .
        cd ..
        
        echo "[+] SDE数据压缩包创建完成: sde.zip"
        ls -la icons.zip sde.zip release_compare_${BUILD_NUMBER}.log 2>/dev/null || ls -la icons.zip sde.zip
    
    - name: 验证压缩包
      run: |
        echo "[+] 验证压缩包..."
        
        # 验证图标压缩包
        if [ ! -f "icons.zip" ]; then
          echo "[x] 图标压缩包不存在: icons.zip"
          exit 1
        fi
        
        ICONS_SIZE=$(stat -c%s "icons.zip")
        ICONS_SIZE_MB=$((ICONS_SIZE / 1024 / 1024))
        echo "[+] 图标压缩包大小: ${ICONS_SIZE_MB} MB (${ICONS_SIZE} bytes)"
        
        # 验证SDE数据压缩包
        if [ ! -f "sde.zip" ]; then
          echo "[x] SDE数据压缩包不存在: sde.zip"
          exit 1
        fi
        
        SDE_SIZE=$(stat -c%s "sde.zip")
        SDE_SIZE_MB=$((SDE_SIZE / 1024 / 1024))
        echo "[+] SDE数据压缩包大小: ${SDE_SIZE_MB} MB (${SDE_SIZE} bytes)"
        
        # 检查压缩包大小是否合理
        if [ $ICONS_SIZE_MB -lt 1 ]; then
          echo "[x] 图标压缩包大小异常，可能构建失败"
          exit 1
        fi
        
        if [ $SDE_SIZE_MB -lt 5 ]; then
          echo "[x] SDE数据压缩包大小异常，可能构建失败"
          exit 1
        fi
        
        # 计算压缩包哈希值
        ICONS_SHA256=$(sha256sum "icons.zip" | cut -d' ' -f1)
        SDE_SHA256=$(sha256sum "sde.zip" | cut -d' ' -f1)
        echo "[+] 图标压缩包SHA256: $ICONS_SHA256"
        echo "[+] SDE数据压缩包SHA256: $SDE_SHA256"
        
        # 验证release比较日志文件（可选）
        BUILD_NUMBER="${{ needs.get-build-info.outputs.build-number }}"
        if [ -f "release_compare_${BUILD_NUMBER}.log" ]; then
          LOG_SIZE=$(stat -c%s "release_compare_${BUILD_NUMBER}.log")
          LOG_HASH=$(sha256sum "release_compare_${BUILD_NUMBER}.log" | cut -d' ' -f1)
          echo "[+] release_compare_${BUILD_NUMBER}.log - 大小: ${LOG_SIZE} bytes, SHA256: ${LOG_HASH}"
        else
          echo "[!] release_compare_${BUILD_NUMBER}.log 不存在（首次构建或比较失败）"
        fi
        
        # 验证压缩包完整性
        if unzip -t "icons.zip" > /dev/null 2>&1; then
          echo "[+] 图标压缩包完整性验证通过"
        else
          echo "[x] 图标压缩包损坏或格式错误"
          exit 1
        fi
        
        if unzip -t "sde.zip" > /dev/null 2>&1; then
          echo "[+] SDE数据压缩包完整性验证通过"
        else
          echo "[x] SDE数据压缩包损坏或格式错误"
          exit 1
        fi
        
        # 显示压缩包内容概览
        echo "[+] 图标压缩包内容概览:"
        unzip -l "icons.zip" | head -10
        
        echo "[+] SDE数据压缩包内容概览:"
        unzip -l "sde.zip" | head -10
        SDE_TOTAL_FILES=$(unzip -l "sde.zip" | tail -1 | awk '{print $2}')
        echo "[+] SDE数据压缩包包含 $SDE_TOTAL_FILES 个文件"
        
        # 显示sde.zip的目录结构（tree视图）
        echo "[+] SDE数据压缩包目录结构:"
        echo "sde.zip"
        unzip -l "sde.zip" | grep -E '\.(sqlite|json|log)$' | awk '{print "├── " $4}' | sort | head -20
        if [ $(unzip -l "sde.zip" | grep -E '\.(sqlite|json|log)$' | wc -l) -gt 20 ]; then
          echo "└── ... (还有更多文件)"
        fi
        
        echo "[+] 压缩包验证完成"
    
    
    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          icons.zip
          sde.zip
          release_compare_${{ needs.get-build-info.outputs.build-number }}.log
        tag_name: sde-build-${{ needs.get-build-info.outputs.build-number }}
        name: EVE SDE Build ${{ needs.get-build-info.outputs.build-number }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

  notify-completion:
    name: 通知完成
    runs-on: ubuntu-latest
    needs: [get-build-info, build-sde, create-release]
    if: always() && needs.get-build-info.outputs.new-build == 'true'
    
    steps:
    - name: 构建状态通知
      run: |
        BUILD_NUMBER="${{ needs.get-build-info.outputs.build-number }}"
        
        if [ "${{ needs.build-sde.result }}" == "success" ] && [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "[+] SDE构建成功完成"
          echo "Build Number: $BUILD_NUMBER"
          echo "Release: https://github.com/${GITHUB_REPOSITORY}/releases/tag/sde-build-$BUILD_NUMBER"
        else
          echo "[x] SDE构建失败"
          echo "Build Number: $BUILD_NUMBER"
          echo "请检查GitHub Actions日志"
        fi
