name: Auto SDE Build and Release

on:
  workflow_dispatch:
    inputs:
      build_patch:
        description: '构建补丁包（即使已存在相同buildNumber的release也重新构建）'
        required: false
        default: false
        type: boolean
  schedule:
    # 每天固定时间（UTC时间）
    - cron: '0 0 * * *'    # 北京时间 08:00
    - cron: '0 4 * * *'    # 北京时间 12:00
    - cron: '0 11 * * *'   # 北京时间 19:00
    - cron: '30 11 * * *'  # 北京时间 19:30
    - cron: '0 14 * * *'   # 北京时间 22:00

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  get-build-info:
    name: 获取SDE版本信息
    runs-on: ubuntu-latest
    
    outputs:
      build-number: ${{ steps.get-build-info.outputs.build-number }}
      release-date: ${{ steps.get-build-info.outputs.release-date }}
      build-key: ${{ steps.get-build-info.outputs.build-key }}
      new-build: ${{ steps.get-build-info.outputs.new-build }}
      patch-version: ${{ steps.get-build-info.outputs.patch-version }}
      final-build-number: ${{ steps.get-build-info.outputs.final-build-number }}
    
    steps:
    - name: 获取SDE版本信息并检查重复
      id: get-build-info
      run: |
        echo "[+] 获取最新SDE版本信息..."
        
        # 获取最新SDE信息
        SDE_INFO=$(curl -s "https://developers.eveonline.com/static-data/tranquility/latest.jsonl" | jq -r '.')
        
        BUILD_NUMBER=$(echo "$SDE_INFO" | jq -r '.buildNumber')
        RELEASE_DATE=$(echo "$SDE_INFO" | jq -r '.releaseDate')
        BUILD_KEY=$(echo "$SDE_INFO" | jq -r '._key')
        
        echo "Build number: ${BUILD_NUMBER}"
        echo "Release date: ${RELEASE_DATE}"
        echo "Build key: ${BUILD_KEY}"
        
        # 检查是否为补丁包构建
        BUILD_PATCH="${{ github.event.inputs.build_patch }}"
        echo "Build patch mode: ${BUILD_PATCH}"
        
        # 首先检查原始buildNumber的release是否已存在
        TAG_NAME="sde-build-${BUILD_NUMBER}"
        echo "[+] 检查Release是否已存在: ${TAG_NAME}"
        
        RELEASE_EXISTS=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG_NAME}" | jq -r '.id')
        
        if [ "$BUILD_PATCH" = "true" ]; then
          echo "[+] 补丁包模式：强制重新构建"
          
          if [ "$RELEASE_EXISTS" != "null" ] && [ -n "$RELEASE_EXISTS" ]; then
            echo "[+] 原始版本已存在，查找下一个可用的补丁版本号"
            
            # 查找已存在的补丁版本
            PATCH_VERSION=1
            FINAL_BUILD_NUMBER="${BUILD_NUMBER}.01"
            
            # 检查补丁版本直到找到可用的版本号（最多99次）
            while [ $PATCH_VERSION -le 99 ]; do
              PATCH_STR=$(printf "%02d" $PATCH_VERSION)
              TAG_NAME="sde-build-${BUILD_NUMBER}.${PATCH_STR}"
              
              echo "[+] 检查补丁版本: ${TAG_NAME}"
              RELEASE_EXISTS=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s \
                "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${TAG_NAME}" | jq -r '.id')
              
              if [ "$RELEASE_EXISTS" = "null" ] || [ -z "$RELEASE_EXISTS" ]; then
                echo "[+] 找到可用的补丁版本: ${TAG_NAME}"
                FINAL_BUILD_NUMBER="${BUILD_NUMBER}.${PATCH_STR}"
                NEW_BUILD="true"
                break
              else
                echo "补丁版本 ${TAG_NAME} 已存在，尝试下一个"
                PATCH_VERSION=$((PATCH_VERSION + 1))
              fi
            done
            
            if [ $PATCH_VERSION -gt 99 ]; then
              echo "[x] 错误：已达到补丁版本上限（99），无法创建新的补丁包"
              exit 1
            fi
          else
            echo "[+] 原始版本不存在，直接使用原始buildNumber"
            FINAL_BUILD_NUMBER="${BUILD_NUMBER}"
            PATCH_VERSION=0
            NEW_BUILD="true"
          fi
          
          echo "patch-version=${PATCH_VERSION}" >> $GITHUB_OUTPUT
          echo "final-build-number=${FINAL_BUILD_NUMBER}" >> $GITHUB_OUTPUT
        else
          # 正常模式：检查Release是否已存在
          if [ "$RELEASE_EXISTS" != "null" ] && [ -n "$RELEASE_EXISTS" ]; then
            echo "Release ${TAG_NAME} 已存在，跳过构建"
            NEW_BUILD="false"
          else
            echo "新版本 ${TAG_NAME} 需要构建"
            NEW_BUILD="true"
          fi
          
          echo "patch-version=0" >> $GITHUB_OUTPUT
          echo "final-build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        fi
        
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "release-date=${RELEASE_DATE}" >> $GITHUB_OUTPUT
        echo "build-key=${BUILD_KEY}" >> $GITHUB_OUTPUT
        echo "new-build=${NEW_BUILD}" >> $GITHUB_OUTPUT

  build-sde:
    name: 构建SDE数据库
    runs-on: ubuntu-latest
    
    needs: [get-build-info]
    if: needs.get-build-info.outputs.new-build == 'true'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 执行SDE构建
      run: |
        echo "[+] 执行SDE构建"
        echo "[+] Build Number: ${{ needs.get-build-info.outputs.build-number }}"
        echo "[+] Final Build Number: ${{ needs.get-build-info.outputs.final-build-number }}"
        echo "[+] Patch Version: ${{ needs.get-build-info.outputs.patch-version }}"
        
        # 设置环境变量，让main.py知道最终的build number
        export FINAL_BUILD_NUMBER="${{ needs.get-build-info.outputs.final-build-number }}"
        export PATCH_VERSION="${{ needs.get-build-info.outputs.patch-version }}"
        
        python -u main.py
    
    - name: 生成图标版本metadata.json
      run: |
        echo "[+] 生成图标版本metadata.json"
        
        # 调用icon_version_update.py生成metadata.json
        python -u scripts/icon_version_update.py \
          --api-url "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest"
        
        # 验证metadata.json是否生成
        if [ ! -f "output_icons/metadata.json" ]; then
          echo "[x] 错误：metadata.json生成失败"
          exit 1
        fi
        
        echo "[+] metadata.json生成成功"
        cat output_icons/metadata.json
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: sde-output-${{ needs.get-build-info.outputs.final-build-number }}
        path: |
          output_sde/
          output_icons/
          release_compare_${{ needs.get-build-info.outputs.final-build-number }}.md
        retention-days: 30

  create-release:
    name: 创建Release
    runs-on: ubuntu-latest
    
    needs: [get-build-info, build-sde]
    if: needs.get-build-info.outputs.new-build == 'true'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: sde-output-${{ needs.get-build-info.outputs.final-build-number }}
        path: ./
    
    - name: 创建压缩包
      run: |
        FINAL_BUILD_NUMBER="${{ needs.get-build-info.outputs.final-build-number }}"
        
        # 创建图标压缩包（从output_icons/icons.zip复制）
        if [ -f "output_icons/icons.zip" ]; then
          cp "output_icons/icons.zip" "icons.zip"
          echo "[+] 图标压缩包创建完成: icons.zip"
        else
          echo "[x] 图标压缩包不存在: output_icons/icons.zip"
          exit 1
        fi
        
        # 复制metadata.json（必须存在）
        if [ ! -f "output_icons/metadata.json" ]; then
          echo "[x] 错误：metadata.json不存在"
          exit 1
        fi
        
        cp "output_icons/metadata.json" "metadata.json"
        echo "[+] metadata.json复制完成"
        echo "[+] metadata.json内容:"
        cat metadata.json
        
        # 创建SDE数据压缩包（直接压缩output_sde目录为ZIP格式）
        cd output_sde
        zip -r "../sde.zip" .
        cd ..
        
        echo "[+] SDE数据压缩包创建完成: sde.zip"
        ls -la icons.zip sde.zip metadata.json release_compare_${FINAL_BUILD_NUMBER}.md 2>/dev/null || ls -la icons.zip sde.zip
    
    - name: 验证压缩包
      id: verify-packages
      run: |
        echo "[+] 验证压缩包..."
        
        # 验证图标压缩包
        if [ ! -f "icons.zip" ]; then
          echo "[x] 图标压缩包不存在: icons.zip"
          exit 1
        fi
        
        ICONS_SIZE=$(stat -c%s "icons.zip")
        ICONS_SIZE_MB=$((ICONS_SIZE / 1024 / 1024))
        echo "[+] 图标压缩包大小: ${ICONS_SIZE_MB} MB (${ICONS_SIZE} bytes)"
        
        # 验证SDE数据压缩包
        if [ ! -f "sde.zip" ]; then
          echo "[x] SDE数据压缩包不存在: sde.zip"
          exit 1
        fi
        
        SDE_SIZE=$(stat -c%s "sde.zip")
        SDE_SIZE_MB=$((SDE_SIZE / 1024 / 1024))
        echo "[+] SDE数据压缩包大小: ${SDE_SIZE_MB} MB (${SDE_SIZE} bytes)"
        
        # 检查压缩包大小是否合理
        if [ $ICONS_SIZE_MB -lt 1 ]; then
          echo "[x] 图标压缩包大小异常，可能构建失败"
          exit 1
        fi
        
        if [ $SDE_SIZE_MB -lt 5 ]; then
          echo "[x] SDE数据压缩包大小异常，可能构建失败"
          exit 1
        fi
        
        # 计算压缩包哈希值
        ICONS_SHA256=$(sha256sum "icons.zip" | cut -d' ' -f1)
        SDE_SHA256=$(sha256sum "sde.zip" | cut -d' ' -f1)
        echo "[+] 图标压缩包SHA256: $ICONS_SHA256"
        echo "[+] SDE数据压缩包SHA256: $SDE_SHA256"
        
        # 将SHA256值输出到环境变量，供后续步骤使用
        echo "icons-sha256=${ICONS_SHA256}" >> $GITHUB_OUTPUT
        echo "sde-sha256=${SDE_SHA256}" >> $GITHUB_OUTPUT
        
        # 验证压缩包完整性
        if unzip -t "icons.zip" > /dev/null 2>&1; then
          echo "[+] 图标压缩包完整性验证通过"
        else
          echo "[x] 图标压缩包损坏或格式错误"
          exit 1
        fi
        
        if unzip -t "sde.zip" > /dev/null 2>&1; then
          echo "[+] SDE数据压缩包完整性验证通过"
        else
          echo "[x] SDE数据压缩包损坏或格式错误"
          exit 1
        fi
        
        # 显示压缩包内容概览
        echo "[+] 图标压缩包内容概览:"
        unzip -l "icons.zip" | head -10
        
        echo "[+] SDE数据压缩包内容概览:"
        unzip -l "sde.zip" | head -10
        SDE_TOTAL_FILES=$(unzip -l "sde.zip" | tail -1 | awk '{print $2}')
        echo "[+] SDE数据压缩包包含 $SDE_TOTAL_FILES 个文件"
        
        # 显示sde.zip的目录结构（tree视图）
        echo "[+] SDE数据压缩包目录结构:"
        echo "sde.zip"
        unzip -l "sde.zip" | grep -E '\.(sqlite|json|log)$' | awk '{print "├── " $4}' | sort | head -20
        if [ $(unzip -l "sde.zip" | grep -E '\.(sqlite|json|log)$' | wc -l) -gt 20 ]; then
          echo "└── ... (还有更多文件)"
        fi
        
        echo "[+] 压缩包验证完成"
    
    
    - name: 创建Release说明
      run: |
        FINAL_BUILD_NUMBER="${{ needs.get-build-info.outputs.final-build-number }}"
        PATCH_VERSION="${{ needs.get-build-info.outputs.patch-version }}"
        BUILD_NUMBER="${{ needs.get-build-info.outputs.build-number }}"
        RELEASE_DATE="${{ needs.get-build-info.outputs.release-date }}"
        ICONS_SHA256="${{ steps.verify-packages.outputs.icons-sha256 }}"
        SDE_SHA256="${{ steps.verify-packages.outputs.sde-sha256 }}"
        
        # 从metadata.json读取icon_version（必须存在）
        if [ ! -f "metadata.json" ]; then
          echo "[x] 错误：metadata.json不存在"
          exit 1
        fi
        
        ICON_VERSION=$(cat metadata.json | jq -r '.icon_version')
        
        if [ -z "$ICON_VERSION" ] || [ "$ICON_VERSION" = "null" ]; then
          echo "[x] 错误：无法从metadata.json读取icon_version"
          exit 1
        fi
        
        echo "[+] 从metadata.json读取icon_version: ${ICON_VERSION}"
        
        # 创建简短的Release说明
        RELEASE_NOTES_FILE="release_notes_${FINAL_BUILD_NUMBER}.md"
        
        echo "# EVE SDE Build ${FINAL_BUILD_NUMBER}" > "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "## 构建信息" >> "$RELEASE_NOTES_FILE"
        echo "- **Build Number**: ${BUILD_NUMBER}" >> "$RELEASE_NOTES_FILE"
        if [ "$PATCH_VERSION" != "0" ]; then
          echo "- **Patch Version**: ${PATCH_VERSION}" >> "$RELEASE_NOTES_FILE"
        fi
        echo "- **Icon Version**: ${ICON_VERSION}" >> "$RELEASE_NOTES_FILE"
        echo "- **icon_sha256**: ${ICONS_SHA256}" >> "$RELEASE_NOTES_FILE"
        echo "- **sde_sha256**: ${SDE_SHA256}" >> "$RELEASE_NOTES_FILE"
        echo "- **Release Date**: ${RELEASE_DATE}" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "## 详细比较报告" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "请查看详细的版本比较报告：" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "[下载详细比较报告](https://github.com/${GITHUB_REPOSITORY}/releases/download/sde-build-${FINAL_BUILD_NUMBER}/release_compare_${FINAL_BUILD_NUMBER}.md)" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "或者下载附件中的 \`release_compare_${FINAL_BUILD_NUMBER}.md\` 文件。" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "## 下载文件" >> "$RELEASE_NOTES_FILE"
        echo "- **icons.zip**: 图标压缩包" >> "$RELEASE_NOTES_FILE"
        echo "- **sde.zip**: SDE数据压缩包" >> "$RELEASE_NOTES_FILE"
        echo "- **metadata.json**: 版本元数据文件（包含icon_version等信息）" >> "$RELEASE_NOTES_FILE"
        echo "- **release_compare_${FINAL_BUILD_NUMBER}.md**: 详细比较报告" >> "$RELEASE_NOTES_FILE"
        
        echo "[+] Release说明已生成: $RELEASE_NOTES_FILE"
    
    - name: 创建Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          icons.zip
          sde.zip
          metadata.json
          release_compare_${{ needs.get-build-info.outputs.final-build-number }}.md
        tag_name: sde-build-${{ needs.get-build-info.outputs.final-build-number }}
        name: EVE SDE Build ${{ needs.get-build-info.outputs.final-build-number }}
        body_path: release_notes_${{ needs.get-build-info.outputs.final-build-number }}.md
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

  notify-completion:
    name: 通知完成
    runs-on: ubuntu-latest
    needs: [get-build-info, build-sde, create-release]
    if: always() && needs.get-build-info.outputs.new-build == 'true'
    
    steps:
    - name: 构建状态通知
      run: |
        FINAL_BUILD_NUMBER="${{ needs.get-build-info.outputs.final-build-number }}"
        PATCH_VERSION="${{ needs.get-build-info.outputs.patch-version }}"
        
        if [ "${{ needs.build-sde.result }}" == "success" ] && [ "${{ needs.create-release.result }}" == "success" ]; then
          echo "[+] SDE构建成功完成"
          echo "Final Build Number: $FINAL_BUILD_NUMBER"
          if [ "$PATCH_VERSION" != "0" ]; then
            echo "Patch Version: $PATCH_VERSION"
          fi
          echo "Release: https://github.com/${GITHUB_REPOSITORY}/releases/tag/sde-build-$FINAL_BUILD_NUMBER"
        else
          echo "[x] SDE构建失败"
          echo "Final Build Number: $FINAL_BUILD_NUMBER"
          echo "请检查GitHub Actions日志"
        fi
